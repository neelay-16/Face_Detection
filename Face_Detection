# Load HAAR Face Classifier
face_classifier = cv2.CascadeClassifier('haarcascade_frontalcatface.xml')

# Collecting the Training Data

import cv2
import numpy as np
def face_extractor(img):
    #Function detects the faces and returns the cropped image
    #If no face detected,it returns the input image
    
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray,1.3,5)
    
    if faces is ():
        return None
    
    #Crop all faces found
    for (x,y,w,h) in faces:
        cropped_face = img[y:y+h,x:x+w]
        
    return cropped_face

#Initialize Webcam
cap = cv2.VideoCapture(0)
count=0

#Collect 100 samples of your face from webcam
while True:
    ret,frame = cap.read()
    if face_extractor(frame) is not None:
        count += 1
        face = cv2.resize(face_extractor(frame),(200,200))
        face = cv2.cvtColor(face,cv2.COLOR_BGR2GRAY)
        
        #Save file in specified directory with unique name
        file_name_path = 'desktop/faces/' + str(count) + '.jpg'
        cv2.imwrite(file_name_path,face)
        
        #Put count on images and display live count
        cv2.putText(face, str(count), (50, 50), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)    
        cv2.imshow('Face Cropper',face)
        
    else:
        print("Face not found")
        pass
    
    if cv2.waitKey(1) == 13 or count == 100:
        break
        
cap.release()
cv2.destroyAllWindows()
print("Training data collected")

# Training the model

from os import listdir
from os.path import isfile,join
#Get the training data we previously made
data_path = 'desktop/faces/'
onlyfiles = [f for f in listdir(data_path) if isfile(join(data_path,f))]

#Create arrys for training dataand labels
Training_Data,Labels = [],[]

#Open training images in our datapath
#Create a numpy array for training data
for i,files in enumerate(onlyfiles):
    image_path = data_path + onlyfiles[i]
    images = cv2.imread(image_path,cv2.IMREAD_GRAYSCALE)
    Training_Data.append(np.asarray(images,dtype=np.uint8))
    Labels.append(i)
    
    
#Create a numpy arrya for both training data and labels
Labels = np.asarray(Labels,dtype=np.int32)


#Initialize face recognizer
#model=cv2.face.createLBPHFaceRecognizer()
#pip install opencv-contrib-python
#model = cv2.createLBPHFaceRecognizer()

vimal_model = cv2.face_LBPHFaceRecognizer.create()
#Let's train our model
vimal_model.train(np.asarray(Training_Data), np.asarray(Labels))
print("Model Trained successfully")

# Recognizing the face

import cv2

face_classifier = cv2.CascadeClassifier('haarcascade_frontalcatface.xml')

def face_detector(img, size=0.5):
    # Convert image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray, 1.3, 5)

    if faces is ():
        return img, []

    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 255), 2)
        roi = img[y:y + h, x:x + w]
        roi = cv2.resize(roi, (200, 200))
    return img, roi

cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    
    if not ret:
        # Skip processing if frame capture failed
        continue

    image, face = face_detector(frame)

    try:
        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)

        # Pass face to prediction model
        # "results" comprises of a tuple containing the label
        results = vimal_model.predict(face)

        if results[1] < 500:
            confidence = int(100 * (results[1] / 400))
            display_string = str(confidence) + '% Confident it is user'

        cv2.putText(face, str(count), (50, 50), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)

        if confidence > 10:
            cv2.putText(image, "Identified!", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)

        else:
            cv2.putText(image, "I don't know who you are", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)

        cv2.imshow('Face Recognition', image)
        
    except:
        cv2.putText(image, "No face found", (220, 120), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)
        cv2.putText(image, "Looking for a face", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)
        cv2.imshow('Face Recognition', image)
        pass
    
    # Add a delay and check for key press to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

        
        
    
