# Start recognizing faces

import cv2

face_classifier = cv2.CascadeClassifier('haarcascade_frontalcatface.xml')

def face_detector(img, size=0.5):
    # Convert image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray, 1.3, 5)

    if faces is ():
        return img, []

    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 255), 2)
        roi = img[y:y + h, x:x + w]
        roi = cv2.resize(roi, (200, 200))
    return img, roi

cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    
    if not ret:
        # Skip processing if frame capture failed
        continue

    image, face = face_detector(frame)

    try:
        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)

        # Pass face to prediction model
        # "results" comprises of a tuple containing the label
        results = vimal_model.predict(face)

        if results[1] < 500:
            confidence = int(100 * (results[1] / 400))
            display_string = str(confidence) + '% Confident it is user'

        cv2.putText(face, str(count), (50, 50), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)

        if confidence > 10:
            cv2.putText(image, "Identified!", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)

        else:
            cv2.putText(image, "I don't know who you are", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)

        cv2.imshow('Face Recognition', image)
        
    except:
        cv2.putText(image, "No face found", (220, 120), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)
        cv2.putText(image, "Looking for a face", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1.0, (255, 255, 255), 2)
        cv2.imshow('Face Recognition', image)
        pass
    
    # Add a delay and check for key press to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
